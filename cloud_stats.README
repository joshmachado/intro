cloud_stats.README
######################################
###     Guide to data stored in    ###
### [source]_[res]_cloud_stats.csv ###
######################################

cloudnum: from default catalog
x: default RA from tab['XCTR_DEG']
xs: corrected RA. xs = x*cosy
y: default DEC from tab['YCTR_DEG']
nn_index: cloud num of nearest neighbor
nn2_index: cloud num of 2nd nearest neighbor
nn3_index: cloud num of 3rd nearest neighbor
min_dist: distance to nearest neighbor (pc)
min_dist2nd: distance to 2nd nearest neighbor (pc)
min_dist3rd: distance to 3rd nearest neighbor (pc)
mean_cloud_sep_nn: This is the distance to nearest neighbor expressed in MEAN CLOUD SIZE RADII. For cloud A, distance to nearest cloud (B) is expressed as DIST_A_TO_B(pc)/MEAN_CLOUD_RADIUS(pc). Mean cloud radius is determined as mean of tab['RAD_PC']
mean_cloud_sep_nn2: above, but to 2nd nearest neighbor
mean_cloud_sep_nn3: above, but to 3rd nearest neighbor

### WILL ADD ###
cloud_sep: This is the distance expressed in variable CLOUD SIZE RADII. For cloud A, distance to nearest cloud (B) is expressed as DIST_A_TO_B(pc)/CLOUD_A_RADIUS(pc)



###Peak Stats###
peak_stats.py contains the following functions:

retrieve(noise, source=[], res=[]):
      noise: 'homogenized', 'matched'
      source: ['list','of','sources']
      res: [60,90,120,150]
    OUTPUT: [source]_[res]_cloud_stats.csv and [source]_stats.csv

pull_props(source=[], res=[], noise):
    source: ['list','of','sources']
    res: [60,90,120,150]
    noise: 'homogenized', 'matched'
  OUTPUT: retrieves and populates [source]_[res]_cloud_stats.csv with properties of neighbors (MLUM, SIGV, RAD)

pull_pairs(source, res, noise, prop):
    source: 'source' *note only singular source, not list of sources here
    res: 60 *note only singular resolution here, not list
    noise: 'homogenized' or 'matched'
    prop: 'distance', 'mean_cloud_sep', 'beam_sep', 'MLUM_MSUN', 'SIGV_KMS', 'RAD_PC'
  OUTPUT: returns three dataframes (source_res_first, source_res_second, source_res_third) with columns: cloud_index, nn(2,3)_index, cloud_prop, nn(2,3)nn_prop
